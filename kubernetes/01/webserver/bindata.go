// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// Dockerfile
// bindata.go
// current.md
// finish.md
// index.html
// index.json
// intro.md
// runPrep.sh
// step0-courseData.sh
// step0-foreground.sh
// step0-verify.sh
// step0.md
// step1-courseData.sh
// step1-foreground.sh
// step1-verify.sh
// step1.md
// step2-courseData.sh
// step2-foreground.sh
// step2-verify.sh
// step2.md
// step3-courseData.sh
// step3-foreground.sh
// step3-verify.sh
// step3.md
// step4-courseData.sh
// step4-foreground.sh
// step4-verify.sh
// step4.md
// step5-courseData.sh
// step5-foreground.sh
// step5-verify.sh
// step5.md
// step6-courseData.sh
// step6-foreground.sh
// step6-verify.sh
// step6.md
// step7-courseData.sh
// step7-foreground.sh
// step7-verify.sh
// step7.md
// verify.sh
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xcd\xca\x82\x40\x18\x46\xf7\x73\x15\x0f\xee\x9d\x11\x3e\xf8\x70\xe3\x22\xd4\x2c\xc2\x46\x46\xa2\x22\x22\xc6\x9f\x26\xc1\x1c\x18\x7f\xea\xf2\x83\x84\x34\xda\xbd\x2f\x3c\x87\x73\x96\x82\xc7\x50\xba\x96\x8d\x22\x7b\x2e\x36\xc1\x5a\x80\x29\xcd\x5a\x93\xb3\x47\x99\xb5\xa5\x19\x4a\x43\x7c\x9e\x1c\xf1\x79\xa9\xd2\xa0\x44\xec\xb6\x88\x38\x4f\xbd\xba\x6a\xfa\x27\x22\xbe\x10\xfe\xca\xfb\x73\xff\xa1\x34\xb2\xbe\xaa\x0b\xd8\x12\x94\xcd\x31\x42\xde\xbe\x36\x37\xb2\xcb\x6f\x93\x70\x90\x86\x5d\x0a\xd9\x49\x36\xaa\x6c\xfb\x6a\xf4\xdd\x73\x7e\x53\xa6\x0b\x74\xdc\xd2\x2f\x3c\x3c\x24\x3c\x0d\xe1\x3a\xae\x43\xfc\x38\xc0\xc9\x9a\x15\x58\xe7\x57\x00\x00\x00\xff\xff\x7b\xb0\xf0\xba\xef\x00\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 239, mode: os.FileMode(436), modTime: time.Unix(1571647017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1571661439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _currentMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbb\x6e\xeb\x30\x10\x44\x7b\x7e\xc5\x02\xae\x65\xfa\xfa\xe6\xa9\x3a\x4d\x8a\x00\x29\xd2\xa4\x13\x4d\x8e\xe2\x85\x25\xae\xb0\x5c\x26\x48\xbe\x3e\x90\x25\x15\x69\x07\x73\xe6\x8c\x7b\xce\x6c\x1c\x06\xfe\x01\xbd\x84\x62\x50\xca\x92\x40\x5f\x6c\x67\xea\x2e\xf5\x84\x90\xc6\xce\xb9\xdd\x8e\x5e\x83\x86\x11\x06\x2d\xad\x6b\xc8\xe4\x82\xdc\x52\x17\x4e\x31\xa1\xdf\x1f\xfe\x1d\xff\xdf\xdc\xde\xdd\x3f\x3c\x2e\x41\xb7\x55\x68\xe0\x1e\x94\xaa\x06\x63\x99\x81\xe3\x61\xdd\x7b\xe3\xe9\xba\xf4\x2e\x95\x62\xc8\x94\x50\x4c\xe5\x9b\xe2\x50\xaf\x3f\xa2\xe4\x9e\x3f\x56\xf0\xef\x21\x52\x14\xd8\xd6\x5c\xe6\x9e\x24\xd6\x11\xd9\x16\x8f\x6b\xe8\x6c\x36\x95\xd6\xfb\x99\xd1\x0c\x43\xd9\xb3\xf8\x24\xb1\xf8\x02\xab\x93\x9f\x54\x52\x8d\x73\xbd\x41\xfe\x64\x95\x3c\xf3\xde\x44\x86\xe2\x57\x93\x8f\x8a\x60\x68\x56\x55\xb3\xc5\xee\x37\x00\x00\xff\xff\xc0\x23\x23\x12\x39\x01\x00\x00")

func currentMdBytes() ([]byte, error) {
	return bindataRead(
		_currentMd,
		"current.md",
	)
}

func currentMd() (*asset, error) {
	bytes, err := currentMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "current.md", size: 313, mode: os.FileMode(420), modTime: time.Unix(1571661188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _finishMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x8e\xc2\x30\x0c\xc6\xf1\xdd\x4f\xe1\xeb\x0d\x37\x45\xb7\x9f\x7a\x9d\x58\x98\x79\x82\x90\xb8\xa8\xaa\x63\x47\xb5\x03\xe2\xed\x51\x17\x50\x60\xfd\xe9\xf3\xdf\xdf\x78\xf4\x1f\xc3\x83\x0a\x7d\x01\x9c\xb4\x10\x36\xa3\xb9\x31\x26\x2d\x25\x4a\x36\x74\xc5\x55\xf4\xf6\x07\x30\xd6\x8d\x30\x71\x34\xfb\x1f\xe6\x85\x69\x98\x00\xd6\x76\xa6\xe4\x8c\x17\x72\x14\xcd\x64\x4f\x49\xdc\xcc\x69\x0b\x8b\xcc\xda\xcd\x92\x96\xaa\x42\xe2\xe6\xd1\x9b\xf5\x8d\xaa\xd9\x3a\xc8\x54\x59\xef\x65\x9f\x77\x6e\xd7\xf4\xba\x74\xad\x6f\xdf\x77\xd9\x5b\xf8\x29\x21\x44\xe6\x20\xb1\x90\xd5\x98\xc8\x60\xfc\xad\x1b\x4d\xf0\x08\x00\x00\xff\xff\xfb\x78\x63\x83\x0c\x01\x00\x00")

func finishMdBytes() ([]byte, error) {
	return bindataRead(
		_finishMd,
		"finish.md",
	)
}

func finishMd() (*asset, error) {
	bytes, err := finishMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "finish.md", size: 268, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x8f\x1b\x37\x0f\xbe\xfb\x57\x30\x0a\x5e\xe0\x2d\x50\x59\xf6\x62\xdb\x2c\x66\x67\x8c\x2d\x8a\x1c\x7a\xe9\xa9\x05\x72\x0b\x34\x12\xed\x51\xac\xaf\x4a\x1c\x7f\x24\xd8\xff\x5e\x68\x3e\xbc\xe3\x22\xe8\xa5\x30\x0c\x89\xa4\xc4\x87\x7c\x28\x72\xea\x77\x3a\x28\xba\x46\x84\x8e\x9c\xdd\xad\xea\xb2\x80\x95\xfe\xd0\x30\xb6\x5b\x01\xd4\x1d\x4a\x5d\x36\x00\xb5\x43\x92\xa0\x3a\x99\x32\x52\xc3\x7a\xda\xf3\x27\xb6\x34\x75\x44\x91\xe3\x5f\xbd\x39\x35\xec\x13\xff\xf3\x17\xfe\x6b\x70\x51\x92\x69\x2d\x32\x50\xc1\x13\x7a\x6a\xd8\x6f\x1f\x1b\xd4\x07\xbc\xbb\xe9\xa5\xc3\x86\x9d\x0c\x9e\x63\x48\xb4\x38\x7c\x36\x9a\xba\x46\xe3\xc9\x28\xe4\x83\xf0\x23\x18\x6f\xc8\x48\xcb\xb3\x92\x16\x9b\xed\x7a\x33\xbb\xca\x2a\x99\x48\x90\x93\x6a\x58\x89\x25\x57\x42\x28\xed\xd7\x5f\xb2\x46\x6b\x4e\x69\xed\x91\x84\x8f\x4e\xbc\x9c\xb1\x55\xc1\xc5\xe0\xd1\x53\x16\x77\xd2\x97\xfc\xf2\x70\xaf\xe1\x36\x48\x8d\x69\xed\x4c\x71\xc5\x76\xb5\x18\x81\xee\x51\x0b\x89\x0d\x73\x41\xf7\x25\xdb\x7f\x8f\xe1\xd0\x89\xaf\x98\x82\xc6\xd3\x65\xd8\x70\xa7\x5f\xb6\x22\x27\x35\x4b\xdf\xc1\x1a\xc0\xa0\xce\x74\xb5\x38\x22\x03\xbc\x77\x32\x1d\xe1\xdb\x24\x01\x68\x93\xa3\x95\xd7\x0a\x8c\xb7\xc6\x23\x6f\x6d\x50\xc7\xe7\x9b\xb9\xb0\x2a\x8d\xaf\xc0\x07\x8f\xb3\xfa\x75\x5a\x4b\x9d\x31\xc1\x37\xb8\x1d\xdf\x07\x4f\x7c\x2f\x9d\xb1\xd7\x0a\xb2\xf4\x99\x67\x4c\x66\xff\xfc\x8f\x13\xd9\x7c\xc5\x0a\x1e\x9e\xe2\x65\x61\x21\xbc\x10\x97\xd6\x1c\x7c\x05\x0a\x3d\x61\x5a\x18\x63\xc8\x86\x4c\xf0\x15\xec\xcd\x05\xf5\xc2\x32\x54\xb8\x82\xed\x66\xf3\xbf\x85\x76\xc8\xa5\x43\x73\xe8\xa8\x82\xc7\x87\x7b\xa0\x10\x2b\xd8\x3c\x83\xc5\x3d\x0d\x9b\x9b\xa5\x95\xea\x78\x48\xa1\xf7\x9a\xab\x60\x43\xaa\xe0\xfd\xe3\x43\xf9\x2d\x09\x19\xf4\xe7\xce\xd0\x1b\x1f\xb3\x87\x36\xe8\xeb\x92\x8e\x36\x5c\x4a\xae\xc6\x1f\x2a\x68\x43\xd2\x98\x78\x1b\x96\xa1\x38\xe3\xf9\x5b\x02\x77\x51\x3a\x99\x0e\x85\xf8\xed\x26\x5e\x40\xf6\x14\x60\x33\x2c\x4b\x52\xa4\xd6\x83\xef\xc7\x9f\x16\x57\xe7\xea\xbc\x38\xd4\x46\xc2\xff\x9d\xbc\xcc\x18\x1f\x7e\xfe\x10\x2f\x3f\x2c\xaa\x7f\xab\xe0\xa2\x2c\xdb\xc1\xd9\xeb\x22\x89\x21\xa9\x1b\xd8\xbd\xfd\x75\x7c\x65\xb5\x98\x5e\xd9\x28\x59\xe3\x8f\x90\xd0\x36\x6c\x50\xe7\x0e\x91\x18\x74\x09\xf7\x6f\x4f\xbc\x0d\x81\xf2\x59\x92\xea\xd6\x2a\x38\xf1\x28\x9c\xf1\x74\x1d\xd5\x94\x64\x5c\xab\x9c\xe7\x36\xfd\x0f\xfe\x3e\x9f\x64\x32\xb2\xb5\x98\xd7\x79\xf4\x58\x46\x94\x98\x67\x54\x5d\xd2\xdb\xad\xea\x77\x9c\x8f\xdd\x32\xb5\x13\xcc\x74\xde\xb5\x65\x92\xe7\xf5\xc1\x50\xd7\xb7\x7d\xc6\x34\x8d\x9c\x01\x2e\xb7\x68\x8d\x3c\x86\x5e\x1c\x25\x71\xbc\x48\x17\x2d\x0a\x27\x33\x61\x12\xc7\xa7\xcc\x63\x92\x8a\xca\x48\x52\xa1\x4f\x19\x07\x5d\x19\x4b\xc2\x78\x4a\x61\xed\xf4\x9c\xeb\xdc\xd0\x3b\xe0\x7c\x52\xcd\x31\x19\xdd\xb0\xd2\xbf\xd3\xb0\x10\x9f\xb5\x24\x59\x3a\x7e\xbe\xb2\x9a\xf8\x6f\xd3\xae\xfc\x47\x61\x1f\x92\x83\x02\x1e\x7c\xc3\x04\x03\x87\xd4\x05\xdd\xb0\x18\x32\xb1\x79\x2e\xd4\x6d\x4f\x14\xfc\x34\x93\x72\xdf\x3a\x53\x86\xaa\x95\x39\x37\xac\x25\x0f\x2d\x79\x1e\x93\x71\x32\x5d\x19\x0c\x55\x68\xd8\x77\x5a\x96\xed\xe0\xf7\x8f\x9f\xfe\x80\xdd\x0e\x6a\x31\xfa\x9c\xf3\x2a\x71\x8c\xfb\xa1\x02\x13\xf1\x62\xfc\x8a\xac\xfe\x0e\x00\x00\xff\xff\x0a\x69\x4c\x73\x57\x06\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1623, mode: os.FileMode(436), modTime: time.Unix(1571651161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x4f\x6f\xf2\x38\x10\xc6\xef\x7c\x0a\xcb\x67\xa0\xfc\xa7\xea\x8d\x85\xc3\x76\xbb\x2d\x95\xda\xaa\x07\x84\x2a\x93\x4c\xc8\x08\xc7\x46\xf6\xb8\x5d\xb6\xe2\xbb\xbf\x72\x20\x10\xde\x96\xc8\x7a\x29\x27\xec\x79\xfc\xcc\xfc\x62\xc7\x93\xcf\x1a\x63\x9c\x90\x24\xf0\x1b\xc6\xc7\x06\x04\xa1\x5a\xb2\x3b\xb7\x00\xa3\x80\xc0\xb2\xb1\x74\x96\xc0\xf0\xba\x57\xc6\x60\x23\x83\x6b\x42\xad\x4e\xf4\x99\x93\x84\x4c\xe9\x18\xca\x4b\xa3\xdd\x52\xf6\x81\x94\xb2\x95\x5b\x80\x88\xb3\xbd\x0f\x26\x09\x46\x4e\xd2\xc6\xdb\x2c\x60\x89\x4a\x15\x39\x08\xb3\xbc\x98\x6e\x8b\x65\xa8\x1c\x81\x2d\x72\x93\x40\x69\xf9\x0d\xf3\x45\x33\xc6\x2d\xc1\xda\x0f\x67\xf9\x90\xb1\xfd\x7c\x1e\x3b\x20\xbd\x82\x8c\x74\x06\xb9\x45\x11\x83\xff\xc8\x87\xfc\xfa\x56\x33\x8b\xcb\xb1\x77\x30\x98\x6c\x0e\xd1\xc6\x6e\xdc\xb4\x69\x59\x14\x69\x67\x2c\x4c\x04\x89\xa3\xf0\x38\xf7\x45\x1c\xc3\x51\x96\x68\x03\x4b\xa3\x9d\x8a\xbd\xac\x50\x6d\x8b\x3f\xf5\x2a\x94\x5b\x85\x84\x42\xe2\xff\x27\x0f\x79\xac\x15\x19\x2d\xd9\xa3\x14\xa8\xce\x61\xb6\x2b\x31\xdb\xa1\x98\xed\x30\xcc\xf6\x45\x98\x63\xad\x12\x5c\x3a\x03\xf9\x91\x89\x48\x32\x47\x28\x91\x36\xe7\xe0\x3a\x95\x70\x9d\x50\xb8\x4e\x18\x5c\xe7\x22\xb8\x09\xac\xa5\xde\xb0\xc7\xe9\x84\x3d\x00\x7d\x68\xb3\x3a\x47\xd5\xad\xa4\xea\x86\x52\x75\xc3\xa8\xba\x17\x51\xfd\xa3\x51\xb1\x57\x6d\x56\x60\xd8\x83\x77\x3d\xc3\xd4\xab\x64\xea\x85\x32\xf5\xc2\x98\x7a\x17\xee\x54\xa4\x8d\x20\x28\x73\xed\x6e\xb2\xb1\xb3\xa4\x33\xf6\xaf\x58\x80\x3c\x47\xda\xaf\x24\xed\x87\x92\xf6\xc3\x48\xfb\x3f\x71\x26\x4b\x77\xca\x44\xd8\x74\xa1\x85\x89\xcf\xe1\x0d\x2a\xf1\x06\xa1\x78\x83\x30\xbc\xc1\x4f\xe0\xdd\x03\x19\x8c\x6c\xc3\x82\x79\xdf\xb7\x9a\x6f\xc0\x86\x95\x60\xc3\x50\xb0\x61\x18\xd8\xb0\x12\x6c\xbe\x5b\xc5\xd1\x5f\xf0\x87\xb6\x57\x2a\x38\x0f\x94\x0b\xfe\xad\x12\xe3\xd4\xa3\x81\xf5\xc1\x79\xbb\x37\x4c\x50\xa1\x4d\xbf\x73\xdc\x45\xbc\x65\xad\xa8\x63\x5b\xaf\x71\x50\xef\x68\xb4\xca\x40\xd1\xb1\xfd\xa6\x18\x43\x51\x5a\x22\xa4\x85\xbd\xbb\x4d\xf5\x47\x5c\x1c\x20\xdf\x9f\xc9\xb8\x22\xe6\x50\x8a\x8d\x76\x79\x2e\x02\x93\xa1\x12\xb2\x81\x89\x11\x87\x0e\xcd\x4f\x96\x16\xad\xfd\x93\x2b\xb1\xfb\x2a\x78\xb1\x7e\xf3\x18\x4f\x0d\x24\x7e\x9c\x12\xad\xed\xcd\xd5\xd5\x6c\xf6\xf7\xf4\xe9\xf9\xed\xe9\xe5\xaf\xc9\xf4\x7e\x74\xfb\x30\x9f\x37\xae\x5b\xd7\xad\xc6\x6c\x76\x37\x7a\x1e\x8d\xa7\x93\xd1\x9b\x17\xcc\xe7\xcd\x12\x8c\x6d\xae\x04\x89\x48\xc7\xa2\x19\xe9\x8c\x17\xe7\xa9\xfe\x25\xeb\xdd\xf5\xc9\x4b\x11\x98\xbe\xd5\xfe\x83\xf4\xf3\xda\x7e\xa3\xf8\x42\x44\x2b\x50\xf1\xf1\x89\x63\x26\x96\x80\x7e\x82\xaf\x0e\x2f\x6b\x63\xff\x95\xe5\x77\x6c\x5b\xdb\xd6\xf2\xdf\xaf\x00\x00\x00\xff\xff\x40\x01\xb7\x0f\xd7\x09\x00\x00")

func indexJsonBytes() ([]byte, error) {
	return bindataRead(
		_indexJson,
		"index.json",
	)
}

func indexJson() (*asset, error) {
	bytes, err := indexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.json", size: 2519, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _introMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xbd\x4e\xeb\x40\x10\x85\xfb\x79\x8a\x73\x95\x7a\x5f\xe0\xb6\xb1\x84\x02\x21\xa4\xa3\x5e\xaf\x27\xf1\xc8\xc3\x4e\x34\x3b\x8b\x65\x9e\x1e\x05\x0a\x52\x9e\x1f\x7d\xfa\x76\x38\x54\xc4\x2c\x0d\x8d\x4b\x88\x55\x6c\xd6\xb1\x8a\x2a\x26\xc3\xc5\x54\x6d\x95\x7a\xfd\x4f\x94\x70\xa8\x12\x92\x55\xbe\x18\x2f\x7d\x64\xaf\x1c\xdc\xb0\xb7\x1a\x6e\x8a\xb3\x66\xa9\x94\xee\xf9\x22\xd7\xee\x8c\xa5\x8f\x5c\x42\xd1\x43\x54\x62\xa3\x84\x81\x6f\x37\xb5\x0d\xe7\xb7\x01\x27\x8e\xd5\x7c\xa1\x84\x67\x93\x8a\x77\xf3\x85\x1d\x27\x9b\xf8\xe7\x58\xcc\x73\xf0\x63\x8d\x55\x62\xc6\xbe\xb7\xb0\x0f\x1c\xf3\xc8\xfa\x4b\xbc\x03\x1f\x7c\x86\xdc\xe6\xd1\xb2\x4f\x7f\xeb\x2b\x87\x4b\x69\xa9\xb1\x7f\xb2\x13\xd1\x0e\x4f\x66\x13\x8e\xbd\x2c\xff\xe8\x3b\x00\x00\xff\xff\x7a\xd9\x8f\x50\x03\x01\x00\x00")

func introMdBytes() ([]byte, error) {
	return bindataRead(
		_introMd,
		"intro.md",
	)
}

func introMd() (*asset, error) {
	bytes, err := introMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "intro.md", size: 259, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _runprepSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\xbb\x6a\xec\x40\x0c\x86\xfb\x79\x0a\x9d\x3d\x5b\x24\x04\x5b\x7d\x20\xe0\xc2\x8d\x8b\x90\x60\xf2\x02\x1a\x5b\xd9\x19\x3c\xb2\x87\x91\xf6\x12\x42\xde\x3d\xb0\x9b\x3b\x84\x14\x5b\x09\xf4\x4b\x1f\xdf\xff\xff\x1f\xfa\x38\xa3\x27\x0d\xce\xb5\x5d\x7f\xb3\xbe\x90\xc9\x58\x32\x54\x23\x54\x19\x70\x47\x05\x4d\xf2\xa5\x73\xfb\x0d\x1b\x54\x77\xb0\x7e\x6e\xbb\xfe\x05\x85\xe2\x0c\xc1\x2c\xeb\x35\xe2\x26\x5a\xd8\xfa\x7a\x58\x04\xd5\x73\x8a\x34\x2d\x5b\x9c\xc8\x2a\x3e\x90\xe4\xc4\x58\x68\x8f\x42\x6a\x5c\x90\x54\xd9\xf4\xf8\xff\x93\xf9\xb8\x14\xa9\x83\x49\x3a\x07\xfc\x01\x71\x43\x90\x65\x04\xba\x3a\x7c\x75\xfe\x2c\x82\x29\x7a\xd4\x27\x35\x96\xf1\x6d\x1e\x2f\x6a\xe5\xb2\x8b\x03\x9f\xdb\xee\x9d\xe3\x94\x47\xa8\x22\xac\xb4\x79\xb8\xbd\x6f\xbb\xbe\x39\xe9\x34\xab\x3f\x15\xdc\x69\x37\x58\x02\x9e\xc9\x27\x86\x5f\x52\x35\x2a\xf6\x3d\x74\xaf\x01\x00\x00\xff\xff\x7c\x79\x3d\xcf\xdc\x01\x00\x00")

func runprepShBytes() ([]byte, error) {
	return bindataRead(
		_runprepSh,
		"runPrep.sh",
	)
}

func runprepSh() (*asset, error) {
	bytes, err := runprepShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "runPrep.sh", size: 476, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step0CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step0CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step0CoursedataSh,
		"step0-courseData.sh",
	)
}

func step0CoursedataSh() (*asset, error) {
	bytes, err := step0CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step0-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step0ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xe2\x02\x04\x00\x00\xff\xff\x30\x98\x82\x7d\x0e\x00\x00\x00")

func step0ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step0ForegroundSh,
		"step0-foreground.sh",
	)
}

func step0ForegroundSh() (*asset, error) {
	bytes, err := step0ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step0-foreground.sh", size: 14, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step0VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x41\x6b\x1b\x31\x10\x85\xef\xfa\x15\xaf\xaa\x59\x5a\x88\x56\x76\x0f\xc5\x35\x49\xa8\x29\x6b\x08\x4d\xea\x12\xfb\x50\x28\x21\xcc\x6a\xc7\xb1\x88\x56\x5a\x56\x52\x93\xd4\xf6\x7f\x2f\xde\xa4\x6d\x6e\x03\xdf\xf7\xde\x0c\xf3\xf6\x8d\xae\xad\xd7\x35\xc5\xad\x10\x3f\xa1\x36\xd0\x65\xb8\xc7\x0d\x8a\x02\x6c\xb6\x01\x4d\xf0\x8c\xfd\xfe\x85\x85\x2e\xe9\x32\x47\xee\x71\x03\x14\x85\x78\xad\x80\x1f\x6d\xc2\x58\x88\xf5\x7c\xf5\xf5\x76\xf5\x65\x79\x5d\x9d\xc9\x89\x14\x31\xe4\xde\xf0\xab\xac\x30\x94\x70\x7a\x8a\x6a\xb9\xc0\x1e\x26\xf7\x0e\x2a\x42\xfd\xc0\xf7\xe5\x6a\x0d\xa5\x1a\x4a\x84\xcf\x0a\xdb\x94\xba\x38\xd3\x3a\x7e\x32\x9b\xfe\xa9\x6d\xd2\xb4\xe4\x47\x36\x39\xb1\xa2\xce\x96\x9c\xd5\x03\xc7\xa4\x26\x25\xb5\xf4\x3b\x78\x7a\x88\xa5\x09\xad\x6e\x78\x43\xd9\x25\xed\xa8\xbe\x75\xe1\xee\x8e\x7b\x9c\xeb\x86\x7f\x69\x9f\x9d\xc3\x87\xf3\x62\x22\x76\x02\x90\x89\x6a\xc7\x72\x06\x79\x9f\x6b\xee\x3d\x27\x8e\xf2\x64\x00\xb6\xe5\x98\xa8\xed\x8e\x70\xf4\xae\xa1\xc4\x50\xca\xc6\xa0\xa6\x1f\xc7\x93\x33\x1f\xa1\x54\x4e\xe6\xfd\xb3\xdd\xd1\x93\x0b\xd4\xc8\x19\x8e\xad\x80\xf4\xd4\x0e\xb5\xa3\xdd\xe2\xe2\x7a\xb5\xfe\x36\xbf\xaa\x0e\x18\xed\x2e\xe7\x2f\xf3\x10\x03\x24\xb7\x64\xdd\xb3\x58\x5d\xcd\x2f\x2e\xff\x81\x68\xd8\x53\x6f\xc3\x70\xdb\x34\x2a\xeb\x6d\x2a\xc7\xf2\x04\x7f\x71\xe8\x8f\x0b\x46\xbb\xff\x8f\x3e\x08\xe0\x20\x0e\xa2\x5a\x2e\x84\x10\x7f\x02\x00\x00\xff\xff\x3c\xa2\x6a\x91\xd5\x01\x00\x00")

func step0VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step0VerifySh,
		"step0-verify.sh",
	)
}

func step0VerifySh() (*asset, error) {
	bytes, err := step0VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step0-verify.sh", size: 469, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step0Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\xc2\x30\x0c\x05\xd0\xdd\xa7\xf8\x6a\xb7\x0c\xe5\x22\x0c\x0c\xb0\xd7\x50\x57\x8d\x1a\xfc\xc1\x49\x14\x71\x7b\x9e\xcc\x33\xae\xd6\xd0\x2b\x4e\xe7\xc0\x38\x88\x1f\x3b\x34\x6c\x11\xb9\x15\xd3\x6a\xe0\xc7\x1c\x53\x4a\x8f\x6a\x91\xd2\x84\xbb\x3e\xa1\xbe\x61\xcf\xa5\x20\xec\xdb\x73\xd8\x86\xec\x3b\xe3\xad\x2d\xd3\x45\xd6\xc6\xfe\x3a\x70\x59\x78\xae\xf2\x0f\x00\x00\xff\xff\xa0\xb5\x11\xce\x65\x00\x00\x00")

func step0MdBytes() ([]byte, error) {
	return bindataRead(
		_step0Md,
		"step0.md",
	)
}

func step0Md() (*asset, error) {
	bytes, err := step0MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step0.md", size: 101, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step1CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step1CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step1CoursedataSh,
		"step1-courseData.sh",
	)
}

func step1CoursedataSh() (*asset, error) {
	bytes, err := step1CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step1-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step1ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xe2\x02\x04\x00\x00\xff\xff\x30\x98\x82\x7d\x0e\x00\x00\x00")

func step1ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step1ForegroundSh,
		"step1-foreground.sh",
	)
}

func step1ForegroundSh() (*asset, error) {
	bytes, err := step1ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step1-foreground.sh", size: 14, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step1VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x5f\x6f\xda\x30\x14\xc5\xdf\xfd\x29\xce\x32\x14\x36\xa9\x8e\x09\xdb\x3a\x40\x6d\x35\x34\x81\x54\xad\x1d\x53\xe1\x61\x12\x62\xad\x13\x5f\xc0\xc2\xb1\xa3\xd8\x19\xed\x08\xdf\x7d\x02\xf6\xa7\xda\xdb\xde\x2c\xff\x8e\x7f\xd7\xf7\xbc\x7c\x21\x32\x6d\x45\x26\xfd\x9a\xb1\x39\xf8\x12\x22\x71\x1b\x2c\x10\xc7\xa0\x7c\xed\xa0\x9c\x25\x34\x0d\xdb\xd4\x19\xe5\xc1\x60\x45\x01\xd6\x29\xf2\xb8\x12\x8a\xbe\x0b\x5b\x1b\x83\xee\x55\x9c\x22\x8e\x8f\x21\xa9\x0a\x04\xb7\x21\x0b\xa3\x7d\x40\x83\x55\x45\x25\x64\x96\x2b\x5a\x26\x9d\xb4\xfb\xe6\xed\xbb\xf3\xf7\xbd\xfe\xe9\xe2\xb9\x24\x8e\xd9\x1c\x0f\xff\xaf\x68\x20\xb7\x1b\xb4\x77\x65\xa5\x6d\x40\xab\xbb\x6f\xa3\x81\x27\x85\xb6\x17\xf3\x6f\x1d\xde\x5f\x08\xb1\x6a\x3f\x80\x1b\x42\xb7\x83\x05\x0e\x93\x9e\xef\x06\x7a\xd4\x01\x1d\xc6\x66\xc3\xe9\xa7\xfb\xe9\xc7\xc9\xdd\xe8\x32\x4a\x23\xe6\x5d\x5d\xe5\x04\xe1\xca\x20\x92\xda\x53\xc5\x72\x19\x70\x71\x81\xd1\x64\x8c\x06\x79\x5d\x19\x70\x0f\xfe\x15\x5f\x26\xd3\x19\x38\x57\x32\x48\x7c\xe0\x58\x87\x50\xfa\x81\x10\xbe\x9f\x2f\xab\xa7\x42\x85\x5e\x42\x8f\x94\xd7\x81\xb8\x2c\x75\x42\x35\xdf\x92\x0f\x3c\x4d\x64\x21\x7f\x38\x2b\xb7\x3e\xc9\x5d\x21\x14\x2d\x65\x6d\x82\x30\x32\xbb\x37\x6e\xb5\xa2\xea\xdf\x8e\xd9\x8e\x01\x51\x90\x99\xa1\x68\x80\xe8\xd0\x55\x65\x29\x90\x8f\xce\x8e\x40\x17\xe4\x83\x2c\xca\x03\x6c\xbd\x52\x32\x10\x38\xd7\xde\xf1\xde\x79\x27\xbd\xb4\x1e\x9c\xd7\x21\x7f\x7d\x4a\x97\xf2\xc9\x38\xa9\xa2\x01\x0e\x56\x20\xb2\xb2\x38\x6a\x5b\xbb\xf1\xf5\xdd\x74\xf6\x79\x78\x3b\xda\xa3\xb5\xbb\x19\xfe\x3a\x1f\x9f\x01\x11\x15\x52\x9b\x53\x70\x74\x3b\xbc\xbe\xf9\x03\x7c\x4e\x56\x56\xda\x1d\xff\xd6\xf3\x5c\x5b\x1d\x92\x34\x3a\xc3\x6f\xec\xaa\xc3\x80\xd6\xee\x6f\xd1\x7b\x06\xec\xd9\x9e\x8d\x26\x63\xc6\xd8\xcf\x00\x00\x00\xff\xff\x95\xb4\x30\xf7\x8e\x02\x00\x00")

func step1VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step1VerifySh,
		"step1-verify.sh",
	)
}

func step1VerifySh() (*asset, error) {
	bytes, err := step1VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step1-verify.sh", size: 654, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step1Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbb\x6e\xeb\x30\x10\x44\x7b\x7e\xc5\x02\xae\x65\xfa\xfa\xe6\xa9\x3a\x4d\x8a\x00\x29\xd2\xa4\x13\x4d\x8e\xe2\x85\x25\xae\xb0\x5c\x26\x48\xbe\x3e\x90\x25\x15\x69\x07\x73\xe6\x8c\x7b\xce\x6c\x1c\x06\xfe\x01\xbd\x84\x62\x50\xca\x92\x40\x5f\x6c\x67\xea\x2e\xf5\x84\x90\xc6\xce\xb9\xdd\x8e\x5e\x83\x86\x11\x06\x2d\xad\x6b\xc8\xe4\x82\xdc\x52\x17\x4e\x31\xa1\xdf\x1f\xfe\x1d\xff\xdf\xdc\xde\xdd\x3f\x3c\x2e\x41\xb7\x55\x68\xe0\x1e\x94\xaa\x06\x63\x99\x81\xe3\x61\xdd\x7b\xe3\xe9\xba\xf4\x2e\x95\x62\xc8\x94\x50\x4c\xe5\x9b\xe2\x50\xaf\x3f\xa2\xe4\x9e\x3f\x56\xf0\xef\x21\x52\x14\xd8\xd6\x5c\xe6\x9e\x24\xd6\x11\xd9\x16\x8f\x6b\xe8\x6c\x36\x95\xd6\xfb\x99\xd1\x0c\x43\xd9\xb3\xf8\x24\xb1\xf8\x02\xab\x93\x9f\x54\x52\x8d\x73\xbd\x41\xfe\x64\x95\x3c\xf3\xde\x44\x86\xe2\x57\x93\x8f\x8a\x60\x68\x56\x55\xb3\xc5\xee\x37\x00\x00\xff\xff\xc0\x23\x23\x12\x39\x01\x00\x00")

func step1MdBytes() ([]byte, error) {
	return bindataRead(
		_step1Md,
		"step1.md",
	)
}

func step1Md() (*asset, error) {
	bytes, err := step1MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step1.md", size: 313, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step2CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step2CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step2CoursedataSh,
		"step2-courseData.sh",
	)
}

func step2CoursedataSh() (*asset, error) {
	bytes, err := step2CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step2-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step2ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x4a\xce\x49\x4d\x2c\xe2\xe2\x02\x04\x00\x00\xff\xff\x8a\x5c\xa8\xb1\x14\x00\x00\x00")

func step2ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step2ForegroundSh,
		"step2-foreground.sh",
	)
}

func step2ForegroundSh() (*asset, error) {
	bytes, err := step2ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step2-foreground.sh", size: 20, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step2VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x5f\x6b\x1b\x31\x10\xc4\xdf\xf5\x29\xa6\xaa\x31\x2d\x44\xa7\x38\x0f\xc5\x35\x49\xa8\x29\x67\x08\x4d\xea\x12\xfb\xa1\x50\x4a\xd8\xd3\xad\xed\x23\x3a\xe9\x38\xad\x9a\xa4\xb6\xbf\x7b\xb1\xd3\x7f\xe4\x6d\xe1\x37\x33\x3b\xbb\xaf\x5f\xd9\xaa\x09\xb6\xa2\xb4\x51\xea\x1b\xcc\x0a\xb6\x88\xf7\xf8\x8e\xe1\x10\xec\x36\x11\x75\x0c\x8c\xdd\x4e\xdd\xe7\x8a\x9d\x78\xac\x59\x10\x62\xcd\x09\x97\xb6\xe6\x1f\x36\x64\xef\x71\x76\x39\x1c\x01\xc3\xa1\xfa\xdf\x02\x7e\x6c\x04\xa7\x4a\x2d\xa7\x8b\x4f\x77\x8b\x8f\xf3\xdb\xf2\x42\x8f\xb4\x4a\x31\xf7\x8e\x61\x63\x27\xb6\xc8\x89\x7b\xe5\x48\x70\x7e\x8e\x72\x3e\xc3\x0e\x2e\xf7\x1e\x26\xc1\x7c\xc5\x97\xf9\x62\x09\x63\x6a\x12\xc2\x07\x83\x8d\x48\x97\x26\xd6\xa6\xf7\x6e\xd5\x3f\xb5\xb5\x8c\x0b\x7e\x64\x97\x85\x0d\x75\x4d\xc1\xd9\x3c\x70\x12\x33\x2a\xa8\xa5\x9f\x31\xd0\x43\x2a\x5c\x6c\x6d\xcd\x2b\xca\x5e\xac\xa7\xea\xce\xc7\xf5\x9a\xfb\x97\xd5\xd5\x56\x01\x5a\xa8\xf2\xac\x27\xd0\x87\x53\xfb\xc0\xc2\x49\x9f\x1c\x41\xd3\x72\x12\x6a\xbb\x03\x1c\xbc\xa9\x49\x18\xc6\x34\x29\x9a\xf1\xbb\xd3\xd1\x45\x48\x30\x26\x8b\x7b\xfb\xac\xee\xe8\xc9\x47\xaa\xf5\x04\x87\x54\x40\x07\x6a\x8f\xb1\x83\xed\xec\xea\x76\xb1\xfc\x3c\xbd\x29\xf7\x18\x6c\xaf\xa7\xbf\xe7\xa3\x0d\xd0\xdc\x52\xe3\x9f\x85\xe5\xcd\xf4\xea\xfa\x2f\x48\x8e\x03\xf5\x4d\x3c\x76\x1b\x27\xd3\x84\x46\x8a\x33\x7d\x82\x3f\x38\xf6\x87\x05\x83\xed\xbf\x47\xef\x15\xb0\x57\x7b\x55\xce\x67\x4a\xa9\x5f\x01\x00\x00\xff\xff\xd2\xdf\x48\x03\xe5\x01\x00\x00")

func step2VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step2VerifySh,
		"step2-verify.sh",
	)
}

func step2VerifySh() (*asset, error) {
	bytes, err := step2VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step2-verify.sh", size: 485, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step2Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\x4a\x57\x07\xf7\xe9\x10\x34\x74\x88\x2f\x48\x70\x06\xce\x22\xf1\x9a\xdd\x59\xf8\x7d\xe4\x8b\xd0\xb5\x6f\xe6\xbd\xf4\xa4\xed\xa3\x7e\x86\x41\x4a\x98\xa1\x51\xc2\x61\x42\x15\xed\xb0\x95\x90\xdf\xca\xab\x7c\xc5\x3b\xac\x81\x70\x79\x7c\x7d\x39\xd9\x32\x60\xe1\xbe\xa4\x74\xb9\xc8\x1b\xbe\xa3\x1a\x0e\xd0\xe7\x34\xdd\x2a\xb3\x2c\xa6\xca\x73\x7f\xd6\x12\x07\x1a\x57\x56\x6d\xe3\x71\x25\xbb\xcf\x39\xdf\xd3\x0f\x55\xf3\xa6\xc5\xb3\x83\xd1\x73\x37\xdd\xa2\x8c\xfb\x84\xf6\x53\x4d\xdb\xf0\x33\x55\x77\xbf\x59\xeb\x76\xe4\x62\x58\x89\xa9\xec\xe1\x84\x4d\xff\x38\xfd\x05\x00\x00\xff\xff\x08\x3c\x7b\x25\xd9\x00\x00\x00")

func step2MdBytes() ([]byte, error) {
	return bindataRead(
		_step2Md,
		"step2.md",
	)
}

func step2Md() (*asset, error) {
	bytes, err := step2MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step2.md", size: 217, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step3CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step3CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step3CoursedataSh,
		"step3-courseData.sh",
	)
}

func step3CoursedataSh() (*asset, error) {
	bytes, err := step3CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step3-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step3ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x4a\xce\x49\x4d\x2c\xe2\xe2\x02\x04\x00\x00\xff\xff\x8a\x5c\xa8\xb1\x14\x00\x00\x00")

func step3ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step3ForegroundSh,
		"step3-foreground.sh",
	)
}

func step3ForegroundSh() (*asset, error) {
	bytes, err := step3ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step3-foreground.sh", size: 20, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step3VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x51\x6b\x1b\x31\x10\x84\xdf\xf5\x2b\xa6\xaa\x31\x2d\x44\xa7\xb8\x85\xe2\x9a\x24\xd4\x14\x1b\x42\x93\xba\xd8\x7e\x28\x94\x12\x64\xdd\xfa\x2c\xa2\x93\x8e\xd3\x2a\x8e\x6b\xfb\xbf\x97\x73\x9a\x26\x6f\xd2\x7e\xb3\xb3\xb3\xfb\xf6\x8d\x5e\xb9\xa0\x57\x26\x6d\x84\xf8\x05\xb5\x86\x2e\xe2\x3d\x7e\xa3\xdf\x07\xd9\x4d\x44\x19\x03\xe1\x70\x10\xf7\x79\x45\x96\x3d\x2a\x62\x34\xb1\x4c\x50\x01\x5d\x4d\xa5\x5d\x62\xaa\x71\x40\xd5\x52\x83\x2d\x99\x07\x7a\xfe\xcc\x73\x08\x2e\x54\xb8\xd2\x25\x3d\xe8\x90\xbd\x07\xfa\x7d\xf1\xda\x17\xf4\xe8\x18\xe7\x42\x2c\xc7\x8b\x6f\x77\x8b\xaf\xb3\xf9\xe4\x52\x0e\xa4\x48\x31\xb7\x96\xa0\x63\xc3\xba\xc8\x89\x5a\x61\x0d\xe3\xe2\x02\x93\xd9\x14\x07\xd8\xdc\x7a\xa8\x04\xf5\x13\x3f\x66\x8b\x25\x94\x2a\x0d\x1b\x7c\x51\xd8\x30\x37\x69\xa4\x75\xfa\x6c\xd7\xed\xae\x2e\x79\x58\xd0\x23\xd9\xcc\xa4\x4c\xe3\x0a\xca\x6a\x4b\x89\xd5\xa0\x30\xb5\xf9\x13\x83\xd9\xa6\xc2\xc6\x5a\x97\xb4\x36\xd9\xb3\xf6\x66\x75\xe7\x63\x55\x51\xfb\x3a\xf5\x87\xab\xfe\x40\xec\x05\x20\xd9\xac\x3c\xc9\x11\x64\xb7\x7b\x1b\x88\x29\xc9\xb3\x13\x70\x35\x25\x36\x75\xd3\xc1\xde\xbb\xd2\x30\x41\x29\x97\xa2\x1a\x7e\x3a\x1f\x5c\x86\x04\xa5\x32\xdb\xf7\x4f\xea\xc6\xec\x7c\x34\xa5\x1c\xa1\x73\x05\x64\x30\xf5\xc9\xb6\xb7\x9f\x5e\xcf\x17\xcb\xef\xe3\xdb\xc9\x11\xbd\xfd\xcd\xf8\xdf\xfb\xd4\x06\x48\xaa\x8d\xf3\x4f\xc2\xc9\xed\xf8\xfa\xe6\x3f\x48\x96\x82\x69\x5d\x3c\x65\x1b\x26\xe5\x82\xe3\xe2\xa3\x3c\xc3\x33\x8e\x6d\x37\xa0\xb7\x7f\x39\xf4\x51\x00\x47\x71\x14\x93\xd9\x54\x08\xf1\x37\x00\x00\xff\xff\xb3\x4d\x27\xb3\x0a\x02\x00\x00")

func step3VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step3VerifySh,
		"step3-verify.sh",
	)
}

func step3VerifySh() (*asset, error) {
	bytes, err := step3VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step3-verify.sh", size: 522, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step3Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xb1\x0e\x83\x30\x0c\x04\xd0\x3d\x5f\x61\x89\x39\x78\x67\x85\xa5\x0b\xed\xd0\x0f\x20\x10\x0b\x22\xa8\x13\xc5\xa6\x51\xff\xbe\x22\x4b\xb7\x6e\xa7\xd3\xdd\x33\x03\xa5\x23\x7e\x60\x2a\xe4\xde\x34\xc1\xe3\x3e\xc0\x48\x5a\x62\xde\x8d\x69\x1a\x78\x86\x24\x9d\xb1\xd0\x6f\xb4\xec\xa0\x9b\x53\xe8\xc7\x1b\xa4\xe8\x05\x5c\x26\xc8\x27\x73\xe0\xb5\x6e\x87\xb8\x9c\x2f\x62\x75\x1a\x22\x5f\xa7\x4d\x35\x49\x87\x58\x4a\x69\xab\xdf\x5e\xae\xe0\x7c\xc4\x15\x6b\x61\x99\xd4\xee\xe7\x4c\x99\x49\x49\x6c\x60\xa5\x35\x57\x00\xff\x00\x3e\x2e\x82\x4c\x8a\x87\x53\x12\xc5\x9f\x50\xa3\x75\xde\x5f\xc0\x37\x00\x00\xff\xff\x77\x7f\xf2\xdd\xdd\x00\x00\x00")

func step3MdBytes() ([]byte, error) {
	return bindataRead(
		_step3Md,
		"step3.md",
	)
}

func step3Md() (*asset, error) {
	bytes, err := step3MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step3.md", size: 221, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step4CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step4CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step4CoursedataSh,
		"step4-courseData.sh",
	)
}

func step4CoursedataSh() (*asset, error) {
	bytes, err := step4CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step4-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step4ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x4a\xce\x49\x4d\x2c\xe2\xe2\x02\x04\x00\x00\xff\xff\x8a\x5c\xa8\xb1\x14\x00\x00\x00")

func step4ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step4ForegroundSh,
		"step4-foreground.sh",
	)
}

func step4ForegroundSh() (*asset, error) {
	bytes, err := step4ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step4-foreground.sh", size: 20, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step4VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x5f\x6b\x1b\x31\x10\xc4\xdf\xf5\x29\xa6\xaa\x39\x5a\x88\x4e\x71\x29\xc5\x35\x49\xa8\x29\x67\x08\x4d\xea\x12\xfb\xa1\x50\x4a\xd8\xd3\xad\x63\x11\x9d\x74\x9c\xa4\x26\xa9\x7d\xdf\xbd\xf8\xd2\x7f\x6f\xbb\xfb\x9b\x9d\x5d\xe6\xe5\x0b\x5d\x5b\xaf\x6b\x8a\x3b\x21\xbe\x41\x6d\xa1\xcb\x70\x8f\xef\x28\x0a\xb0\xd9\x05\x34\xc1\x33\x0e\x07\x31\x36\x28\x0a\xf1\xff\x14\xfc\x68\x13\x4e\x85\xd8\x2c\xd6\x9f\x6e\xd7\x1f\x57\x37\xd5\xb9\x9c\x4a\x11\x43\xee\x0d\x43\x87\x2e\xe9\x32\x47\xee\x85\xa1\x84\xb3\x33\x54\xab\x25\x0e\x30\xb9\x77\x50\x11\xea\x2b\xbe\xac\xd6\x1b\x28\xd5\x50\x22\x7c\x50\xd8\xa5\xd4\xc5\xb9\xd6\xf1\xbd\xd9\xf6\x4f\x6d\x93\x66\x25\x3f\xb2\xc9\x89\x15\x75\xb6\xe4\xac\x1e\x38\x26\x35\x2d\xa9\xa5\x9f\xc1\xd3\x43\x2c\x4d\x68\x75\xc3\x5b\xca\x2e\x69\x47\xf5\xad\x0b\x77\x77\xdc\xe3\x42\x37\xfc\x43\xfb\xec\x1c\xde\x5c\x14\x53\xb1\x17\x80\x4c\x54\x3b\x96\x73\xc8\xfb\x5c\x73\xef\x39\x71\x94\x27\x23\xb0\x2d\xc7\x44\x6d\x77\x84\x93\x57\x0d\x25\x86\x52\x36\x06\x35\x7b\x77\x3a\x3d\xf7\x11\x4a\xe5\x64\x5e\x3f\xab\x3b\x7a\x72\x81\x1a\x39\xc7\xd1\x15\x90\x9e\xda\xd1\x76\xb2\x5f\x5e\xde\xac\x37\x9f\x17\xd7\xd5\x80\xc9\xfe\x6a\xf1\xbb\x1e\xd7\x00\xc9\x2d\x59\xf7\x2c\xac\xae\x17\x97\x57\x7f\x41\x34\xec\xa9\xb7\x61\xfc\x6d\x16\x95\xf5\x36\x95\x6f\xe5\x09\xfe\xe0\xd0\x1f\x0f\x4c\xf6\xff\x82\x1e\x04\x30\x88\x41\x54\xab\xa5\x10\xe2\x57\x00\x00\x00\xff\xff\xfb\x97\xb2\x51\xc8\x01\x00\x00")

func step4VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step4VerifySh,
		"step4-verify.sh",
	)
}

func step4VerifySh() (*asset, error) {
	bytes, err := step4VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step4-verify.sh", size: 456, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step4Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4b\x33\x31\x10\x86\xef\xf9\x15\x03\xbd\x15\xd2\xb4\x5f\xfb\x55\xed\x45\x84\x5e\xf4\x54\x8a\xe2\x75\xb3\xc9\xb4\x1b\x9a\x9d\x29\x99\x59\x17\xff\xbd\x6c\x14\xf5\xe4\xed\xe5\xe5\x9d\x87\x67\xcc\x13\x27\x82\x86\x38\xe2\x72\xd5\x80\x32\x68\x87\x10\xf2\x20\x8a\x05\x8c\x99\xcd\xe0\x39\x5d\x65\x67\x2c\x1c\xb1\xc7\xbe\xc5\x02\xca\x17\x24\x48\x02\x73\xdf\x86\x88\xa7\xc5\x72\xf5\x6f\xbd\xf9\xbf\xbd\xb9\xbd\xfb\x2c\xe6\xf7\xc6\xc2\x1e\x4f\x7e\xc8\x0a\x0f\x87\x47\x38\x70\x51\x60\x82\xde\x57\xec\x74\xba\xdd\x6c\xd6\x73\x63\xe1\x45\x10\x1a\x91\x0e\x7e\x29\x04\x26\xc2\xa0\x53\xfc\x36\xeb\x58\xd4\x58\x78\xf5\x49\x41\x53\xce\x5f\x7b\xd0\xa1\x90\xd4\xe5\x11\x7d\x7c\x6f\x40\xd4\x2b\x56\xf1\x3d\x87\xa1\x47\x52\xaf\x89\x69\xfa\xa0\x53\xbd\xca\xce\xb9\x71\x1c\x17\x23\xfa\x37\x5c\x8c\x5c\x2e\xe2\xda\xcc\x67\x57\x0b\x4b\xa8\xf6\x32\xb4\x58\x08\x15\xc5\x26\x52\x3c\x97\x0a\x70\x7f\x00\x22\x07\x71\x84\xea\xb2\x57\x14\x75\x3f\x84\x1a\xad\x8f\x71\x02\x7c\x04\x00\x00\xff\xff\x01\xe5\x36\xf9\x6d\x01\x00\x00")

func step4MdBytes() ([]byte, error) {
	return bindataRead(
		_step4Md,
		"step4.md",
	)
}

func step4Md() (*asset, error) {
	bytes, err := step4MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step4.md", size: 365, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step5CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step5CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step5CoursedataSh,
		"step5-courseData.sh",
	)
}

func step5CoursedataSh() (*asset, error) {
	bytes, err := step5CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step5-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step5ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xe2\x02\x04\x00\x00\xff\xff\x30\x98\x82\x7d\x0e\x00\x00\x00")

func step5ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step5ForegroundSh,
		"step5-foreground.sh",
	)
}

func step5ForegroundSh() (*asset, error) {
	bytes, err := step5ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step5-foreground.sh", size: 14, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step5VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x6f\x6b\x13\x31\x1c\xc7\x9f\xe7\x55\x7c\x8d\xe5\xa6\xb0\x5c\x76\x82\x52\xcb\x3a\x2c\x72\x85\xe1\x66\x65\xed\x03\x41\x64\xe4\x72\xbf\xb6\xa1\xb9\xe4\x48\x72\x76\xb3\xed\x7b\x97\xbb\xa9\xdb\x93\x10\xf8\x7c\xff\x25\xaf\x5f\xc9\xca\x38\x59\xa9\xb8\x65\xec\x07\xc4\x1a\x32\xf7\x3b\xfc\x44\x96\x81\xf4\xd6\xa3\xf6\x8e\x70\x3c\xb2\x5d\x57\x91\x4e\x16\x1b\x4a\x70\xbe\xa6\xe1\xb8\x28\x20\x44\xdc\xfa\xbd\xb0\xaa\x22\x1b\x71\xc4\x26\x50\x8b\xb3\x1e\x8a\xe0\x2d\xe5\xbd\x2f\x38\x4a\x14\x73\xe3\xe5\xde\x87\x1d\x85\xe9\x19\xae\x64\x4d\xbf\xa4\xeb\xac\x05\xb2\x8c\xbd\xac\x02\x3d\x98\x84\x0b\xc6\x56\xb3\xe5\x97\xfb\xe5\xe7\xc5\x5d\x39\xe5\x05\x67\xd1\x77\x41\x13\xa4\x6f\x93\xcc\xbb\x48\x81\x69\x95\x70\x79\x89\x72\x31\xc7\x11\xba\x0b\x16\x22\x42\x7c\xc7\xb7\xc5\x72\x05\x21\x6a\x95\x14\x3e\x09\x6c\x53\x6a\xe3\x44\xca\xf8\x51\xaf\xc3\x63\x53\xa7\x71\x4e\x0f\xa4\xbb\x44\x42\xb5\x26\xa7\x4e\xec\x29\x26\x51\xe4\xaa\x51\xbf\xbd\x53\xfb\x98\x6b\xdf\xc8\x9a\xd6\xaa\xb3\x49\x5a\x55\xdd\x5b\xbf\xd9\x50\x78\xb9\xfa\xdd\x55\x56\xb0\x03\x03\x78\x52\x95\x25\x3e\x01\x7f\x7e\x2a\x3f\x1f\x80\x69\x28\x26\xd5\xb4\x3d\x1c\xbd\xa9\x55\x22\x08\x61\xa2\x17\xe3\x0f\x17\xc5\xd4\x45\x08\xd1\x25\xfd\xf6\x49\xdd\xaa\x47\xeb\x55\xcd\x27\xe8\x53\x01\xee\x54\x33\xc4\x8e\x0e\xf3\xeb\xbb\xe5\xea\xeb\xec\xb6\x3c\x61\x74\xb8\x99\xfd\xbd\x0f\x36\x80\x53\xa3\x8c\x7d\x12\x96\xb7\xb3\xeb\x9b\xff\x20\x6a\x72\x2a\x18\x3f\x6c\x1b\x47\x61\x9c\x49\xf9\x7b\x7e\x8e\x7f\xd8\x87\xbe\x60\x74\x78\xfe\xe8\x13\x03\x4e\xec\xc4\xca\xc5\x9c\x31\xf6\x27\x00\x00\xff\xff\xa0\xd2\x84\x59\x1d\x02\x00\x00")

func step5VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step5VerifySh,
		"step5-verify.sh",
	)
}

func step5VerifySh() (*asset, error) {
	bytes, err := step5VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step5-verify.sh", size: 541, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step5Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4d\x6b\x32\x31\x10\xc7\xef\xf9\x14\x03\xde\x84\xdd\x28\xca\x73\x10\x11\x84\x47\x4a\xc1\x2a\xa8\x2d\xf4\xb6\x31\x19\x74\x6b\x5e\x96\x4c\xd2\x76\xbf\x7d\x99\x6c\x5f\x73\x49\xc8\xfc\x32\xbf\xff\x44\x6c\xd5\x19\x2d\x8c\x7d\x30\x38\x99\x8e\x41\x11\x34\x6f\x21\xde\x30\x36\x42\x34\x4d\x23\x6e\xf9\x8c\x3a\x59\xb8\x60\x02\x86\x48\xec\xd6\x0f\x1b\xe0\x75\x3c\xad\x4f\x8f\x47\x00\x38\xec\xb7\x1b\xde\x61\x7d\x37\x54\x9e\x36\x87\xe3\xfd\x7e\x27\x9c\xa2\x84\x91\x09\x54\xa6\xe7\xca\xf7\xcd\xcc\xcd\x67\x04\x00\xaf\xd3\x7a\x3a\xaf\x27\x62\x08\xf0\x1b\x1d\x62\x00\xc0\xfc\x1f\x95\xae\x5f\x28\xc7\x12\x62\x34\x82\x53\xdb\xd1\x42\x54\xf0\x1c\x32\xd0\x35\x64\x6b\xe0\x25\x53\x02\x5b\x66\xf2\xa8\x91\x48\xc5\xbe\xe4\x2e\x93\xf1\xa1\x8a\xc1\x62\xcd\x63\x45\x8f\x09\xa9\x6e\x83\x5c\x2e\x07\x86\x4b\xb0\x5a\x35\xa5\xfb\xff\xa0\xb3\x43\x9f\x54\x6a\x83\x67\xcd\x35\xa5\x6e\x21\xe5\xcf\xd3\x73\x8f\xef\xca\x75\x16\x6b\x1d\x9c\x2c\x56\x92\x9f\x20\xfd\x21\x59\x62\x82\x26\xa9\x83\xd7\xd8\x25\x92\xda\x66\xfe\x89\x4a\x19\xd7\xfa\x96\x52\x2c\x1a\xe9\x94\x57\x17\xac\x0c\x76\x36\xf4\x6c\x97\xa3\xdc\x19\x95\x5a\x7f\xa9\x06\x81\xf8\x08\x00\x00\xff\xff\x23\x55\x94\xd6\xb3\x01\x00\x00")

func step5MdBytes() ([]byte, error) {
	return bindataRead(
		_step5Md,
		"step5.md",
	)
}

func step5Md() (*asset, error) {
	bytes, err := step5MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step5.md", size: 435, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step6CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step6CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step6CoursedataSh,
		"step6-courseData.sh",
	)
}

func step6CoursedataSh() (*asset, error) {
	bytes, err := step6CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step6-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step6ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xe2\x02\x04\x00\x00\xff\xff\x30\x98\x82\x7d\x0e\x00\x00\x00")

func step6ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step6ForegroundSh,
		"step6-foreground.sh",
	)
}

func step6ForegroundSh() (*asset, error) {
	bytes, err := step6ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step6-foreground.sh", size: 14, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step6VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x4f\x1b\x4d\x0c\x86\xef\xf3\x2b\xfc\xcd\x87\x48\x5b\x31\xbb\x49\x8b\x50\x8a\x08\x6a\x54\x05\x09\x15\x08\x22\x1c\x2a\x45\x11\x78\x67\x4c\xb2\x65\x77\x66\x35\xf6\x02\x69\x92\xff\x5e\xed\xa6\xb4\xa8\xe2\xd2\xde\x6c\xbd\xb6\x9f\xd7\xe3\xf9\xff\xbf\x34\xcb\x7d\x9a\x21\x2f\x94\x9a\x82\xb9\x83\x34\x09\xf7\x30\x83\xdd\x5d\x20\xbb\x08\xe0\x82\x27\x58\xaf\xd5\x14\x6e\xef\xeb\x8c\xac\x14\x30\x27\x01\x47\x55\x11\x96\x25\x79\x01\xe3\xa1\x51\x0c\x2f\x59\xa8\x6c\xe3\xe8\x49\x88\x8d\x43\x5e\x64\x01\xa3\x03\x13\xe0\x1b\x07\x5f\xa1\x2c\x06\x9d\x55\xc2\x15\xd9\x44\xa8\xac\x0a\x14\xda\x66\x36\x78\xc1\xdc\x53\xe4\x69\x77\x96\x78\x2c\x69\xd3\xb9\x85\xc1\x00\xf4\x6b\x03\x75\xeb\xf0\x4f\x53\xfc\x60\xff\xd9\x4d\x15\xa2\xb4\x68\xc1\x38\x27\xb9\x0c\x51\x9e\x0d\xf4\xf7\xf7\x3f\xbc\x0e\xa4\xea\xaf\x79\x7a\x95\x70\x9d\x31\x09\x4f\xdf\xcd\x12\x74\x2e\x12\x33\x6d\x97\x0e\x8e\x2e\x9a\xc5\x75\xcb\xed\x34\x79\xb7\xd7\x81\x19\x34\xe8\x97\xd7\x00\x7a\xca\x05\xba\x4a\x5d\x0f\x27\x5f\x6e\x26\x9f\xc7\x57\xa3\x81\xee\x69\xc5\xa1\x8e\x96\x20\x0d\x95\xa4\x49\xcd\x14\x95\x45\x81\xa3\x23\x18\x8d\x4f\x60\x0d\xb6\x8e\x05\x18\x06\xf3\x15\x2e\xc7\x93\x6b\x30\xc6\xa1\x20\x7c\x32\xb0\x10\xa9\xf8\x30\x4d\xf9\xa3\xbd\x8b\xcb\xd2\x49\x3f\xa1\x27\xb2\xb5\x90\xc1\x2a\x4f\xa8\x36\x8f\xc4\x62\x7a\x09\x96\xf8\x3d\x78\x7c\xe4\xc4\x86\x32\x75\x74\x87\x75\x21\x69\x81\xd9\x4d\x11\xe6\x73\x8a\x70\x9c\x3a\x7a\x48\x7d\x5d\x14\xf0\xfe\x78\xb7\xa7\x56\x0a\x40\x0b\x66\x05\xe9\xc3\x97\xb7\xd4\x7b\xad\x90\x97\xc4\x82\x65\xd5\x88\x3b\x6f\x1c\x0a\x81\x31\x39\x07\xd3\x3f\xe8\xf6\x06\x9e\xc1\x98\x5a\xec\xdb\x6d\x75\x85\xcb\x22\xa0\xd3\x87\xd0\x4c\x05\xd0\xcd\x37\x69\x3b\x57\x27\xa7\x57\x93\xeb\x8b\xe1\xf9\x68\x03\x3b\xab\xb3\xe1\xcf\xb8\x6d\x03\xd0\x54\x62\x5e\x6c\x0b\x47\xe7\xc3\xd3\xb3\x5f\x02\x5b\xf2\x18\xf3\xd0\x7a\xeb\xb3\xc9\x7d\x2e\xc9\x81\xde\x83\x67\x39\xc4\x06\xb0\xb3\xfa\xfd\xd0\x1b\x05\xb0\x51\x1b\x35\x1a\x9f\x28\xa5\x7e\x04\x00\x00\xff\xff\x16\xea\x30\x84\x40\x03\x00\x00")

func step6VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step6VerifySh,
		"step6-verify.sh",
	)
}

func step6VerifySh() (*asset, error) {
	bytes, err := step6VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step6-verify.sh", size: 832, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step6Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4f\x6f\xdb\x3e\x0c\xbd\xeb\x53\x10\x69\x00\xb7\x3f\x40\x76\x03\xfc\x30\x0c\x06\x72\xe8\xda\xa0\x87\xa1\x43\xd1\x76\xbb\x0c\xdb\x2c\x4b\x6c\xac\xc6\x96\x04\x91\x4e\xda\xb5\xf9\xee\x83\x9d\x3a\x70\xf7\xa7\xd8\xa0\x1b\x29\xbe\xf7\x48\x3e\x8a\x33\x0c\xb5\x7f\x80\x33\x45\x55\xe9\x55\x34\x70\xa1\x9c\xbd\x45\x62\xb8\x8d\xbe\x81\xcf\x15\x46\xfc\x72\x58\x31\x07\xca\xb3\x2c\xaa\x4d\xba\xb4\x5c\xb5\x65\x4b\x18\xb5\x77\x8c\x8e\x53\xed\x9b\x6c\xd5\x96\x18\x1d\x32\x52\x66\x06\xac\x6c\x3d\x4b\x67\xc7\xe9\x2c\xa3\xa8\x33\xd3\x13\x65\x11\xb5\x6f\x1a\x74\x06\xcd\xa8\x46\xee\x6b\xd2\x07\xd5\xd4\x47\x42\x1c\x1c\xc0\x69\x44\xc5\x08\x27\xa6\xb1\x0e\x3e\x12\x46\x21\x8a\xa2\xe8\xf2\x42\x05\xfb\x09\x23\x59\xef\x72\x58\xcf\xc4\xca\x3a\x93\xc3\x35\xc6\xb5\xd5\x78\xa2\xb5\x6f\x1d\x8b\x06\x59\x19\xc5\x2a\x17\x00\x4e\x35\x98\x83\xea\x90\x64\xa7\xfc\x39\x44\x41\x69\xcc\xa1\xd3\x21\xe9\x81\x18\x1b\x21\xa5\x7c\x81\x1e\x4b\xa5\x53\xd5\x72\xe5\xa3\xfd\xae\xd8\x7a\x97\xae\xde\x52\x6a\x7d\xb6\x9e\x95\xc8\x6a\x20\x3f\xad\x5b\x62\x8c\x57\xbe\xc6\x77\xd6\x19\xeb\x96\xaf\x0b\x88\xbe\xc6\x2b\xbc\xed\x72\x2a\xd8\xf3\xe8\xdb\xf0\x0a\x99\x00\xf8\x85\x66\x8f\xaa\x77\x31\xd9\xa3\x0b\x6a\xcb\x3b\xd4\x4c\xb9\x90\xf0\xdb\xb9\xfc\xcb\x34\x8a\xa2\xe8\x57\x71\x8e\xfc\xbc\x87\x6b\xd4\x11\xb9\xdf\x84\xb8\x5e\x9c\x5e\x2d\x6e\xbe\x7d\x38\xb9\x58\xcc\x27\xd3\xc3\xae\x50\x73\x0d\xd2\x8d\x31\x60\x89\x0c\xd4\x57\xc1\x13\x2c\x23\x86\x11\x33\x3c\x81\xda\xac\x20\x79\x0c\xd1\x3a\x86\xe9\x6c\x9b\x1c\x4d\xc4\x00\x34\xaa\xfc\x09\x73\xfa\x38\xe2\xde\x82\xf4\x70\x47\xde\x05\xc5\xd5\x3c\x79\x4c\xbb\xa1\xa7\xec\x57\xe8\xb6\x09\x3c\x41\xa9\x08\xdf\xfc\x0f\xd2\xec\xdb\xb9\x8c\xfe\x7e\xe4\x79\x21\x16\xf7\xc1\x13\xf6\x11\x1f\xcd\xce\xfa\xd6\x91\x35\x38\x4c\x17\x36\x96\x2b\x28\x06\x69\xa1\x43\x28\xa0\xf3\xb2\x72\x26\xdf\xcd\xe3\x45\x12\xa4\x54\xc6\x44\x24\x9a\x27\xc7\x69\xff\x92\x2e\xa6\x35\x06\x96\x95\x27\xa6\x79\xf2\xf5\xbf\x69\xb2\x57\xb5\xb8\x0f\xb5\x8f\x08\xef\xf7\x67\x31\xac\x1b\xbc\x83\xc9\x5e\xee\x04\x6e\x54\x29\xc4\x65\x8d\x8a\x10\x5a\x42\xe8\x7b\x85\xce\x38\xe8\xd8\xea\xde\x39\xbb\x26\x42\xc4\xb5\xf5\x2d\x01\x31\x86\x9e\xe5\xcc\xeb\xb6\x41\xc7\xfd\xa7\xce\x24\xc3\x6d\xef\xee\xfa\x8f\xc7\xfc\xf7\x3f\xb3\x8d\x5d\xd9\xac\xbf\x5e\xeb\x96\x92\x54\x13\x6a\xdc\x19\xed\x47\x00\x00\x00\xff\xff\x69\xec\xb4\x80\x6f\x04\x00\x00")

func step6MdBytes() ([]byte, error) {
	return bindataRead(
		_step6Md,
		"step6.md",
	)
}

func step6Md() (*asset, error) {
	bytes, err := step6MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step6.md", size: 1135, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step7CoursedataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\x52\x06\x01\x85\x82\xa2\xd4\x82\xc4\xa2\xcc\xbc\x74\x85\xb4\xfc\x22\x05\xef\x50\x27\xd7\x20\x3f\xd7\x10\xd7\x60\x05\x90\x2c\x17\x76\x55\x2e\xfe\xce\xde\xae\x41\x30\x15\x5c\x80\x00\x00\x00\xff\xff\xbd\xc2\x23\xfb\x56\x00\x00\x00")

func step7CoursedataShBytes() ([]byte, error) {
	return bindataRead(
		_step7CoursedataSh,
		"step7-courseData.sh",
	)
}

func step7CoursedataSh() (*asset, error) {
	bytes, err := step7CoursedataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step7-courseData.sh", size: 86, mode: os.FileMode(509), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step7ForegroundSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xe2\x02\x04\x00\x00\xff\xff\x30\x98\x82\x7d\x0e\x00\x00\x00")

func step7ForegroundShBytes() ([]byte, error) {
	return bindataRead(
		_step7ForegroundSh,
		"step7-foreground.sh",
	)
}

func step7ForegroundSh() (*asset, error) {
	bytes, err := step7ForegroundShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step7-foreground.sh", size: 14, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step7VerifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x6f\xda\x40\x10\xc5\xef\xfb\x29\x5e\xb7\x16\x24\x52\xd6\x0e\x3d\xb4\x14\x85\xa8\xa8\x02\x29\x6a\x52\x2a\xe0\x50\x29\x8a\x92\xc5\x1e\x60\x8b\xbd\x6b\x79\xc6\x25\xd4\xf8\xbb\x57\x90\xfe\xbb\xf5\x36\x9a\xdf\x9b\x37\x4f\xef\xf5\xab\x64\xe9\x7c\xb2\xb4\xbc\x51\xea\x1e\x66\x85\x24\x0e\x5b\x3c\xa0\xd3\x01\xa5\x9b\x80\x2c\x78\xc2\xe1\xa0\xee\xf1\xb4\xad\x97\x94\x4a\x8e\x35\x09\xca\x90\x31\x8c\xc7\x71\x67\x78\xcf\x42\x05\xa2\xb3\xff\x29\x0e\x58\x57\x54\xa2\x20\xa9\x5c\xca\x38\xc0\xee\xb6\xe8\x36\x65\xe5\xbc\x20\xea\xb5\xdd\x73\x98\x80\x6f\x1c\x7c\x69\x65\x33\xec\x36\x31\x8b\x95\x9a\xe3\x72\x63\x99\xda\xee\x13\x86\x43\xe8\x59\xed\xbd\xf3\x6b\x8d\x07\xa0\xd3\x51\xff\xc6\x04\x3d\x3b\xc1\xa5\x52\x8b\xd1\xfc\xd3\xe3\xfc\xe3\x74\x36\x1e\xea\x9e\x56\x1c\xea\x2a\x25\x24\xa1\x94\x24\xae\x99\x2a\x95\x5a\xc1\xd5\x15\xc6\xd3\x09\x0e\x48\xeb\x2a\x87\x61\x98\xaf\xf8\x32\x9d\x2f\x60\x4c\x66\xc5\xe2\x83\xc1\x46\xa4\xe4\x41\x92\xf0\xfb\x74\x55\xed\x8b\x4c\xfa\x31\x3d\x53\x5a\x0b\x19\x5b\xba\x98\x6a\xb3\x23\x16\xd3\x8b\x6d\x61\x7f\x04\x6f\x77\x1c\xa7\xa1\x48\x32\x5a\xd9\x3a\x97\x24\xb7\xcb\xc7\x3c\xac\xd7\x54\xe1\x3a\xc9\xe8\x7b\xe2\xeb\x3c\xc7\x9b\xeb\x4e\x4f\x35\x0a\xd0\x62\x97\x39\xe9\x01\xf4\xb1\xa5\xca\x93\x10\xeb\x8b\x13\x70\x05\xb1\xd8\xa2\x3c\xc2\xe8\x2c\xb3\x42\x30\xc6\x71\x30\xfd\xb7\x97\xbd\xa1\x67\x18\x53\x4b\x7a\xfe\xa2\x2e\xed\x3e\x0f\x36\xd3\x03\x1c\x5d\x01\xed\x6d\x71\xb2\x8d\x9a\xc9\xcd\x6c\xbe\xf8\x3c\xba\x1b\xb7\x88\x9a\xdb\xd1\xaf\xf9\x74\x06\x68\x2a\xac\xcb\x5f\x84\xe3\xbb\xd1\xcd\xed\x1f\xc0\x29\x79\x5b\xb9\x70\xca\xd6\x67\xe3\xbc\x93\xf8\x9d\xbe\xc0\x6f\x1c\xaa\xe3\x83\xa8\xf9\x5b\x74\xab\x80\x56\xb5\x6a\x3c\x9d\x28\xa5\x7e\x06\x00\x00\xff\xff\x62\x92\x4c\xe2\x59\x02\x00\x00")

func step7VerifyShBytes() ([]byte, error) {
	return bindataRead(
		_step7VerifySh,
		"step7-verify.sh",
	)
}

func step7VerifySh() (*asset, error) {
	bytes, err := step7VerifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step7-verify.sh", size: 601, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _step7Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbd\x6e\xe3\x30\x0c\xc7\x77\x3f\x05\x81\x2c\x77\x83\x2c\xdc\x76\xc8\x9a\xac\x5d\xda\xb1\x28\x60\x59\x62\x6c\xc1\x12\x29\x88\x54\x52\xbf\x7d\x61\x07\x45\x8b\x00\x05\xba\x8a\xe2\x8f\xff\x8f\xee\x8c\x25\xf1\x0a\x4f\xa8\x35\x7a\x81\x17\xac\x57\xac\x70\xa9\x9c\xe1\x75\xc6\x8a\x6f\x7f\x66\xd5\x22\x47\x6b\xab\xbb\xf5\x53\xd4\xb9\x8d\x4d\xb0\x7a\x26\x45\xd2\xde\x73\xb6\x4b\x1b\xb1\x12\x2a\x8a\x5d\xb8\x88\xcd\x4e\x14\xab\x75\x21\x30\x89\xcd\x77\xb4\x91\x1d\x6d\xaf\xff\xfa\xff\xfd\x7b\xbf\xba\x9c\xfe\x76\xdd\xe1\x00\xa7\x19\xfd\x02\x3a\x3b\x3d\x76\xe6\x51\x48\x14\x08\xbb\x42\x0c\x20\xcd\x7b\x14\xb9\xb4\x94\x56\x70\x14\xb6\xe1\xf0\xdc\x88\x22\x4d\x43\x67\xe0\xc4\x39\x6f\xcf\xc3\xa6\xc7\x6b\x02\xe5\x02\xc4\x01\x65\x00\x99\xf9\x26\x50\xb0\x5e\xb8\x66\x47\x1e\x41\xd4\x69\x14\xdd\x6e\x8d\xeb\xfd\xdb\x4f\x8c\xc2\x41\xc0\x18\x97\x92\x21\x97\x51\x8a\xf3\xbf\x61\x6e\x6b\xbb\xc3\x33\xfb\x96\x91\xb6\x21\xd3\x66\xf2\x33\xd2\xaf\xe0\xfa\xc8\x36\xb0\x17\xab\x4e\x16\xb1\x01\xc7\x36\x19\x57\x4a\x8a\x7e\xdf\x32\x3e\xb5\x3d\xd4\x8a\xc2\xad\x7a\x34\x4d\xdc\x84\x26\x33\x45\xe5\x1a\x69\xb2\xdf\xb8\xf7\x9a\x1e\xba\x31\x91\x7c\x1b\x9d\x72\x7d\xa8\xa4\xfb\x08\x00\x00\xff\xff\x38\xe7\xab\xce\x05\x02\x00\x00")

func step7MdBytes() ([]byte, error) {
	return bindataRead(
		_step7Md,
		"step7.md",
	)
}

func step7Md() (*asset, error) {
	bytes, err := step7MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "step7.md", size: 517, mode: os.FileMode(436), modTime: time.Unix(1571641501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _verifySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x5f\x6f\xda\x30\x14\xc5\xdf\xfd\x29\xce\x32\x14\x36\xa9\x8e\x09\xdb\x3a\x40\x6d\x35\x34\x81\x54\xad\x1d\x53\xe1\x61\x12\x62\xad\x13\x5f\xc0\xc2\xb1\xa3\xd8\x19\xed\x08\xdf\x7d\x02\xf6\xa7\xda\xdb\xde\x2c\xff\x8e\x7f\xd7\xf7\xbc\x7c\x21\x32\x6d\x45\x26\xfd\x9a\xb1\x39\xf8\x12\x22\x71\x1b\x2c\x10\xc7\xa0\x7c\xed\xa0\x9c\x25\x34\x0d\xdb\xd4\x19\xe5\xc1\x60\x45\x01\xd6\x29\xf2\xb8\x12\x8a\xbe\x0b\x5b\x1b\x83\xee\x55\x9c\x22\x8e\x8f\x21\xa9\x0a\x04\xb7\x21\x0b\xa3\x7d\x40\x83\x55\x45\x25\x64\x96\x2b\x5a\x26\x9d\xb4\xfb\xe6\xed\xbb\xf3\xf7\xbd\xfe\xe9\xe2\xb9\x24\x8e\xd9\x1c\x0f\xff\xaf\x68\x20\xb7\x1b\xb4\x77\x65\xa5\x6d\x40\xab\xbb\x6f\xa3\x81\x27\x85\xb6\x17\xf3\x6f\x1d\xde\x5f\x08\xb1\x6a\x3f\x80\x1b\x42\xb7\x83\x05\x0e\x93\x9e\xef\x06\x7a\xd4\x01\x1d\xc6\x66\xc3\xe9\xa7\xfb\xe9\xc7\xc9\xdd\xe8\x32\x4a\x23\xe6\x5d\x5d\xe5\x04\xe1\xca\x20\x92\xda\x53\xc5\x72\x19\x70\x71\x81\xd1\x64\x8c\x06\x79\x5d\x19\x70\x0f\xfe\x15\x5f\x26\xd3\x19\x38\x57\x32\x48\x7c\xe0\x58\x87\x50\xfa\x81\x10\xbe\x9f\x2f\xab\xa7\x42\x85\x5e\x42\x8f\x94\xd7\x81\xb8\x2c\x75\x42\x35\xdf\x92\x0f\x3c\x4d\x64\x21\x7f\x38\x2b\xb7\x3e\xc9\x5d\x21\x14\x2d\x65\x6d\x82\x30\x32\xbb\x37\x6e\xb5\xa2\xea\xdf\x8e\xd9\x8e\x01\x51\x90\x99\xa1\x68\x80\xe8\xd0\x55\x65\x29\x90\x8f\xce\x8e\x40\x17\xe4\x83\x2c\xca\x03\x6c\xbd\x52\x32\x10\x38\xd7\xde\xf1\xde\x79\x27\xbd\xb4\x1e\x9c\xd7\x21\x7f\x7d\x4a\x97\xf2\xc9\x38\xa9\xa2\x01\x0e\x56\x20\xb2\xb2\x38\x6a\x5b\xbb\xf1\xf5\xdd\x74\xf6\x79\x78\x3b\xda\xa3\xb5\xbb\x19\xfe\x3a\x1f\x9f\x01\x11\x15\x52\x9b\x53\x70\x74\x3b\xbc\xbe\xf9\x03\x7c\x4e\x56\x56\xda\x1d\xff\xd6\xf3\x5c\x5b\x1d\x92\x34\x3a\xc3\x6f\xec\xaa\xc3\x80\xd6\xee\x6f\xd1\x7b\x06\xec\xd9\x9e\x8d\x26\x63\xc6\xd8\xcf\x00\x00\x00\xff\xff\x95\xb4\x30\xf7\x8e\x02\x00\x00")

func verifyShBytes() ([]byte, error) {
	return bindataRead(
		_verifySh,
		"verify.sh",
	)
}

func verifySh() (*asset, error) {
	bytes, err := verifyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "verify.sh", size: 654, mode: os.FileMode(420), modTime: time.Unix(1571661188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile":          dockerfile,
	"bindata.go":          bindataGo,
	"current.md":          currentMd,
	"finish.md":           finishMd,
	"index.html":          indexHtml,
	"index.json":          indexJson,
	"intro.md":            introMd,
	"runPrep.sh":          runprepSh,
	"step0-courseData.sh": step0CoursedataSh,
	"step0-foreground.sh": step0ForegroundSh,
	"step0-verify.sh":     step0VerifySh,
	"step0.md":            step0Md,
	"step1-courseData.sh": step1CoursedataSh,
	"step1-foreground.sh": step1ForegroundSh,
	"step1-verify.sh":     step1VerifySh,
	"step1.md":            step1Md,
	"step2-courseData.sh": step2CoursedataSh,
	"step2-foreground.sh": step2ForegroundSh,
	"step2-verify.sh":     step2VerifySh,
	"step2.md":            step2Md,
	"step3-courseData.sh": step3CoursedataSh,
	"step3-foreground.sh": step3ForegroundSh,
	"step3-verify.sh":     step3VerifySh,
	"step3.md":            step3Md,
	"step4-courseData.sh": step4CoursedataSh,
	"step4-foreground.sh": step4ForegroundSh,
	"step4-verify.sh":     step4VerifySh,
	"step4.md":            step4Md,
	"step5-courseData.sh": step5CoursedataSh,
	"step5-foreground.sh": step5ForegroundSh,
	"step5-verify.sh":     step5VerifySh,
	"step5.md":            step5Md,
	"step6-courseData.sh": step6CoursedataSh,
	"step6-foreground.sh": step6ForegroundSh,
	"step6-verify.sh":     step6VerifySh,
	"step6.md":            step6Md,
	"step7-courseData.sh": step7CoursedataSh,
	"step7-foreground.sh": step7ForegroundSh,
	"step7-verify.sh":     step7VerifySh,
	"step7.md":            step7Md,
	"verify.sh":           verifySh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile":          &bintree{dockerfile, map[string]*bintree{}},
	"bindata.go":          &bintree{bindataGo, map[string]*bintree{}},
	"current.md":          &bintree{currentMd, map[string]*bintree{}},
	"finish.md":           &bintree{finishMd, map[string]*bintree{}},
	"index.html":          &bintree{indexHtml, map[string]*bintree{}},
	"index.json":          &bintree{indexJson, map[string]*bintree{}},
	"intro.md":            &bintree{introMd, map[string]*bintree{}},
	"runPrep.sh":          &bintree{runprepSh, map[string]*bintree{}},
	"step0-courseData.sh": &bintree{step0CoursedataSh, map[string]*bintree{}},
	"step0-foreground.sh": &bintree{step0ForegroundSh, map[string]*bintree{}},
	"step0-verify.sh":     &bintree{step0VerifySh, map[string]*bintree{}},
	"step0.md":            &bintree{step0Md, map[string]*bintree{}},
	"step1-courseData.sh": &bintree{step1CoursedataSh, map[string]*bintree{}},
	"step1-foreground.sh": &bintree{step1ForegroundSh, map[string]*bintree{}},
	"step1-verify.sh":     &bintree{step1VerifySh, map[string]*bintree{}},
	"step1.md":            &bintree{step1Md, map[string]*bintree{}},
	"step2-courseData.sh": &bintree{step2CoursedataSh, map[string]*bintree{}},
	"step2-foreground.sh": &bintree{step2ForegroundSh, map[string]*bintree{}},
	"step2-verify.sh":     &bintree{step2VerifySh, map[string]*bintree{}},
	"step2.md":            &bintree{step2Md, map[string]*bintree{}},
	"step3-courseData.sh": &bintree{step3CoursedataSh, map[string]*bintree{}},
	"step3-foreground.sh": &bintree{step3ForegroundSh, map[string]*bintree{}},
	"step3-verify.sh":     &bintree{step3VerifySh, map[string]*bintree{}},
	"step3.md":            &bintree{step3Md, map[string]*bintree{}},
	"step4-courseData.sh": &bintree{step4CoursedataSh, map[string]*bintree{}},
	"step4-foreground.sh": &bintree{step4ForegroundSh, map[string]*bintree{}},
	"step4-verify.sh":     &bintree{step4VerifySh, map[string]*bintree{}},
	"step4.md":            &bintree{step4Md, map[string]*bintree{}},
	"step5-courseData.sh": &bintree{step5CoursedataSh, map[string]*bintree{}},
	"step5-foreground.sh": &bintree{step5ForegroundSh, map[string]*bintree{}},
	"step5-verify.sh":     &bintree{step5VerifySh, map[string]*bintree{}},
	"step5.md":            &bintree{step5Md, map[string]*bintree{}},
	"step6-courseData.sh": &bintree{step6CoursedataSh, map[string]*bintree{}},
	"step6-foreground.sh": &bintree{step6ForegroundSh, map[string]*bintree{}},
	"step6-verify.sh":     &bintree{step6VerifySh, map[string]*bintree{}},
	"step6.md":            &bintree{step6Md, map[string]*bintree{}},
	"step7-courseData.sh": &bintree{step7CoursedataSh, map[string]*bintree{}},
	"step7-foreground.sh": &bintree{step7ForegroundSh, map[string]*bintree{}},
	"step7-verify.sh":     &bintree{step7VerifySh, map[string]*bintree{}},
	"step7.md":            &bintree{step7Md, map[string]*bintree{}},
	"verify.sh":           &bintree{verifySh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
